#+TITLE: 一键配置 Spacemacs
#+DATE: <2020-04-05 Sun>
#+OPTIONS: toc:nil num:nil
#+STARTUP: hideblocks

[[https://github.com/lujun9972/emacs-document/blob/master/org-mode/%25E6%2595%2599%25E4%25BD%25A0%25E7%2594%25A8Org-mode%25E7%25AE%25A1%25E7%2590%2586dotfiles.org][Darksun]] 在 [[https://github.com/lujun9972/emacs-document/blob/master/org-mode/%25E6%2595%2599%25E4%25BD%25A0%25E7%2594%25A8Org-mode%25E7%25AE%25A1%25E7%2590%2586dotfiles.org][这篇文章]] 里介绍了如何通过一个 org file 管理自己的各种配置文件. 思路简单来说, 就是通过 tangle 文件中的 org 代码块(执行 org-babel-tangle-file 命令)的代码块, 将配置代码插入到它们应该在的地方.

[[https://github.com/syl20bnr/spacemacs][Spacemacs]] 就是 Emacs 的一套配置。它对 evil 的支持，它的文档完善程度，极大的减少了 Emacs 的使用门槛, 让你可以将更多精力花在如何使用 Emacs/Org mode 上面.

首先确保你电脑上已经:
1. 安装了 Emacs
2. 将 Spacemacs 默认配置下载到本地

然后就可以开始你的个性化定制了, 这里分为两种定制, 一种是 =小修= 你通过修改 Spacemacs 变量配置来定制, 另一种是 =大改= 你通过 Spacemacs 的 layer 机制, 定制自己的使用场景.

* 小修: 修改 init.el
init.el 中一共有四个函数:
1. dotspacemacs/layers
   启动 Emacs 时被调用的函数, 在这里配置想要使用的 layer 和 package
2. dotspacemacs/init
   最早被调用的函数, 在这里不要添加任何自定义代码, 只修改变量值即可
3. dotspacemacs/user-init
   在 2 之后, 在 layer 之前被调用, 在这里配置 package 的变量
4. dotspacemacs/user-config
   在 layer 之后被调用, 绝大部分个人配置应该在这里, 除非有些变量明确要求在 package 加载之前配置.

前三个函数只是微调一些参数, 按自己需求来简单搞下即可.

#+name: spacemacs-layers
#+BEGIN_SRC emacs-lisp
;; 出厂自带的基础 layer, 默认选择 spacemacs 就好.
dotspacemacs-distribution 'spacemacs

;; 使用到了某些 layer 再安装就行
dotspacemacs-enable-lazy-installation 'unused
dotspacemacs-ask-for-lazy-installation t

;; 查找其它 layer 配置的路径列表, 末尾需以"/"结尾
dotspacemacs-configuration-layer-path '()

;; 需要加载的配置 layers
dotspacemacs-configuration-layers
'(
  ;; Completion ;;
  ;; Doc: https://develop.spacemacs.org/layers/+completion/auto-completion/README.html
  (auto-completion :variables
                   auto-completion-enable-sort-by-usage t
                   auto-completion-tab-key-behavior 'cycle
                   :disabled-for org markdown)

  ;; Doc: https://develop.spacemacs.org/layers/+completion/helm/README.html
  (helm :variables
        hybrid-style-enable-hjkl-bindings t)

  ;; Emacs ;;
  ;; Doc: https://develop.spacemacs.org/layers/+emacs/better-defaults/README.html
  better-defaults

  ;; Doc: https://develop.spacemacs.org/layers/+emacs/smex/README.html
  smex

  ;; Doc: https://develop.spacemacs.org/layers/+readers/elfeed/README.html
  (elfeed :variables
          rmh-elfeed-org-files (list "~/Library/Mobile Documents/com~apple~CloudDocs/org/private/elfeed.org"))

  ;; Programming ;;
  emacs-lisp
  git

  ;; Doc: https://develop.spacemacs.org/layers/+os/osx/README.html
  osx

  plantuml
  python
  yaml

  html

  ;; private layer ;;
  lijigang


  (mu4e :variables
        mu4e-maildir "~/Maildir"
        mu4e-attachment-dir "~/Documents/QQmail-attachment"
        mu4e-get-mail-command "/usr/local/bin/mbsync -a"
        mu4e-html2text-command "/usr/local/bin/w3m -T text/html"
        mu4e-use-fancy-chars t
        mu4e-drafts-folder "/QQmail/Drafts"
        mu4e-sent-folder "/QQmail/Sent"
        mu4e-trash-folder "/QQmail/Trash"
        mu4e-refile-folder "/QQmail/All"
        mu4e-alert-interesting-mail-query "flag:unread AND maildir:/INBOX"
        mu4e-display-update-status-in-modeline t
        mu4e-update-interval 300
        mu4e-maildir-shortcuts
        '( ("/INBOX"               . ?i)
           ("/QQmail/Sent"   . ?s)
           ("/QQmail/Trash"       . ?t)
           ("/QQmail/All"    . ?a))
        )
  ;; Orgmode ;;
  ;; Doc: https://develop.spacemacs.org/layers/+emacs/org/README.html
  (org :variables
       org-enable-reveal-js-support t
       org-download-screenshot-method "screencapture"
       org-download-image-dir "./images"
       org-download-heading-lvl nil
       org-download-timestamp "")
  )

;; 如果有些 package, 不想加到 layer 中, 但又想使用, 可以加到这里
;; 如果这些 package 还需要一些配置项, 可以把配置项放在 dotspace/user-config
dotspacemacs-additional-packages '()

;; 如果有些 package 不想升级, 可以放到这里
dotspacemacs-frozen-packages '()

;; 如果有些 packages 不想安装或加载, 可以放到这里
dotspacemacs-excluded-packages '(org-projectile)

;; 只有在使用的 package(in dotspacemacs-configuration-layers or dotspacemacs-additional-packages) 才会安装, 其它的删除掉.
dotspacemacs-install-packages 'used-only
#+END_SRC

#+name: spacemacs-init
#+BEGIN_SRC emacs-lisp
;; 使用 https 连接服务器下载 packages
dotspacemacs-elpa-https t

;; 连接超时时间设置为 5 秒
dotspacemacs-elpa-timeout 5

;; 默认不要升级 spacemacs
dotspacemacs-check-for-update nil

;; 如果电脑上有不同版本的 emacs, 可以配置这个变量来区分
dotspacemacs-elpa-subdirectory nil

;; 编辑模式,三个可选项: vim emacs hybrid
dotspacemacs-editing-style 'vim


;; 不需要将启动过程信息打印到 *Messages* buffer
dotspacemacs-verbose-loading nil

;; 在这里修改你的启动显示图片
;; dotspacemacs-startup-banner "~/Library/Mobile Documents/com~apple~CloudDocs/1-参考/8-Personal/head.png"

;; 设置 *scratch* buffer 为 emacs-lisp 模式
dotspacemacs-scratch-mode 'emacs-lisp-mode

;; 在这里设置你想的主题配色, 启动时加载的是第一个主題
dotspacemacs-themes '(
                      default
                      tao-yin
                      monokai
                      fantom
                      doom-one
                      srcery
                      doom-peacock
                      tao-yang
                      material
                      solarized-light
                      spacemacs-light
                      zenburn
                      dracula
                      )

;; 光标颜色与当前编辑状态保持一致
dotspacemacs-colorize-cursor-according-to-state t

;; The leader key
dotspacemacs-leader-key "SPC"

;; The key used for Emacs commands (M-x) (after pressing on the leader key).
dotspacemacs-emacs-command-key "SPC"

;; The key used for Vim Ex commands (default ":")
dotspacemacs-ex-command-key ":"

;; Major mode leader key is a shortcut key which is the equivalent of
;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
dotspacemacs-major-mode-leader-key ","

;; 设置大文件的定义标准(MB), 如果超过标准, 不激活 major/minor mode, 提升效能
dotspacemacs-large-file-size 5

;; 配置开启时是否全屏
dotspacemacs-fullscreen-at-startup nil

;; 保存文件时删除每行尾部空白符(space/tab)
dotspacemacs-whitespace-cleanup 'trailing
#+END_SRC

#+name: spacemacs-user-init
#+BEGIN_SRC emacs-lisp
;; 默认源太慢了, 建议使用子龙山人的国内镜像源
(setq configuration-layer--elpa-archives
      '(("melpa-cn" . "http://elpa.emacs-china.org/melpa/")
        ("org-cn"   . "http://elpa.emacs-china.org/org/")
        ("gnu-cn"   . "http://elpa.emacs-china.org/gnu/")))
;; 指定自己的 layer 路径
(setq dotspacemacs-configuration-layer-path "~/.spacemacs.d/layers/")

;; https://stackoverflow.com/questions/35286203/exec-path-from-shell-message-when-starting-emacs
;; 解决启动 warning
(setq exec-path-from-shell-check-startup-files nil)

#+END_SRC

#+name: spacemacs-user-config-org-base
#+BEGIN_SRC emacs-lisp
;; 设置 todo keywords
(setq org-todo-keywords
      '((sequence "TODO" "HACK" "|" "DONE")))

;; 设置 bullet list, 让 headline 变漂亮
(setq org-bullets-bullet-list '("☰" "☷" "☯" "☭"))

;; 打开 org-indent mode
(setq org-startup-indented t)

(setq org-remember-clock-out-on-exit t)

;; When editing a code snippet, use the current window rather than popping open a new one (which shows the same information).
(setq org-src-window-setup 'current-window)

 ;; Then inline latex like $y=mx+c$ will appear in a different colour in an org-mode file to help it stand out.
(setq org-highlight-latex-and-related '(latex))

(setq org-html-head-include-default-style nil)
(setq org-export-html-style-include-scripts nil)

(setq org-html-head
        "<link rel='stylesheet' type='text/css' href='https://gongzhitaao.org/orgcss/org.css'/>")

;; 折叠时不再显示「...」, 换个你喜欢的符号
(setq org-ellipsis "▼")

;; inline image 不用展示实际大小，可以自定义大小显示
(setq org-image-actual-width nil)

;; 设置 clocktable 默认属性
(setq org-clock-clocktable-default-properties
      '(:scope agenda :compact t :block today))

(setq org-hierarchical-todo-statistics nil)

(setq org-html-validation-link nil)

;; Let's have pretty source code blocks
(setq org-edit-src-content-indentation 0
      org-src-tab-acts-natively t
      org-src-fontify-natively t
      org-confirm-babel-evaluate nil
      org-support-shift-select 'always)

(setq org-default-notes-file "~/Library/Mobile Documents/com~apple~CloudDocs/org/org-roam/inbox.org")

(setq org-refile-targets '((org-agenda-files :maxlevel . 3)))

;; use new template
(setq org-structure-template-alist '(("a" . "export ascii")
                                     ("c" . "center")
                                     ("C" . "comment")
                                     ("e" . "example")
                                     ("E" . "export")
                                     ("h" . "export html")
                                     ("l" . "export latex")
                                     ("q" . "quote")
                                     ("s" . "src")
                                     ("v" . "verse")))

#+END_SRC

#+name: spacemacs-user-config-org-babel
#+BEGIN_SRC emacs-lisp
  ;; stop emacs asking for confirmation when eval source code
  (setq org-confirm-babel-evaluate nil)

  ;; active Org-babel languages
  (org-babel-do-load-languages
    'org-babel-load-languages
      '(;; other Babel languages
        (emacs-lisp . t)
        ;; (ditaa . t)
        (python . t)
        (shell . t)
        (plantuml . t)))
#+END_SRC

#+name: spacemacs-user-config-org-appearance
#+BEGIN_SRC emacs-lisp
  ;; 调试好久的颜色，效果超赞！todo keywords 增加背景色
  (setf org-todo-keyword-faces '(("TODO" . (:foreground "white" :background "#95A5A6"   :weight bold))
                                 ("HACK" . (:foreground "white" :background "#2E8B57"  :weight bold))
                                 ("DONE" . (:foreground "white" :background "#3498DB" :weight bold))))
#+END_SRC

#+name: spacemacs-user-config-org-capture
#+begin_src emacs-lisp
(setq org-capture-templates
          '(("d"  ;;快捷键
             "Default Todo Tasks" ;; 描述快键键对应的功能
             entry ;; 填充类型为 heading
             (file+headline org-default-notes-file  "Tasks") ;;填充到哪个文件的哪个 heading 下面
              "** TODO %?\n  %i\n")
            ;; %?: 填完后光标所在位置
            ;; %U: 非活跃的时间戳
            ;; %i: 初始内容. 如果有选中区域, 即为该区域内容
            ;; %a: 注释. 通常为 org-store-link 创建的链接))
#+end_src

#+name: spacemacs-user-config-org-archive
#+BEGIN_SRC emacs-lisp
;; Org archive
(setq org-archive-location "20200417123552-archive_tasks.org::date-tree")
#+END_SRC

#+name: spacemacs-user-config-org-agenda
#+BEGIN_SRC emacs-lisp
;; agenda 里面时间块彩色显示
;; From: https://emacs-china.org/t/org-agenda/8679/3
(defun ljg/org-agenda-time-grid-spacing ()
  "Set different line spacing w.r.t. time duration."
  (save-excursion
    (let* ((background (alist-get 'background-mode (frame-parameters)))
           (background-dark-p (string= background "dark"))
           (colors (list "#1ABC9C" "#2ECC71" "#3498DB" "#9966ff"))
           pos
           duration)
      (nconc colors colors)
      (goto-char (point-min))
      (while (setq pos (next-single-property-change (point) 'duration))
        (goto-char pos)
        (when (and (not (equal pos (point-at-eol)))
                   (setq duration (org-get-at-bol 'duration)))
          (let ((line-height (if (< duration 30) 1.0 (+ 0.5 (/ duration 60))))
                (ov (make-overlay (point-at-bol) (1+ (point-at-eol)))))
            (overlay-put ov 'face `(:background ,(car colors)
                                                :foreground
                                                ,(if background-dark-p "black" "white")))
            (setq colors (cdr colors))
            (overlay-put ov 'line-height line-height)
            (overlay-put ov 'line-spacing (1- line-height))))))))

(add-hook 'org-agenda-finalize-hook #'ljg/org-agenda-time-grid-spacing)

(setq org-agenda-prefix-format '((agenda . "%t %s ")))
(setq org-agenda-clockreport-parameter-plist
      '(:link t :maxlevel 6 :fileskip0 t :compact t :narrow 60 :score 0))

(setq org-agenda-start-on-weekday nil)
(setq org-agenda-log-mode-items '(clock))
(setq org-agenda-include-all-todo t)
(setq org-agenda-time-leading-zero t)
(setq org-agenda-use-time-grid nil)

(setq org-directory "~/Library/Mobile Documents/com~apple~CloudDocs/org/")
(setq org-agenda-include-diary t)

;; content of diary-file
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;;Day info             ;;
;; ;; 日出而作, 日落而息  ;;
;; %%(diary-sunrise)      ;;
;; %%(diary-sunset)       ;;
;; %%(diary-lunar-phases) ;;
;; ;;                     ;;
;; %%(diary-iso-date)     ;;
;; ;;中国农历             ;;
;; %%(diary-chinese-date) ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq diary-file "~/Library/Mobile Documents/com~apple~CloudDocs/org/private/standard-diary")

(setq org-agenda-diary-file "~/Library/Mobile Documents/com~apple~CloudDocs/org/private/standard-diary")

(setq org-agenda-files '(
                         "~/Library/Mobile Documents/com~apple~CloudDocs/org/org-roam/inbox.org"))

;; learn from https://github.com/AbstProcDo/Master-Emacs-From-Scrach-with-Solid-Procedures/blob/master/05.Emacs-as-a-Agenda-by-Org.org

;; 设置北京经纬度坐标
(setq calendar-latitude 39.9042)
(setq calendar-longitude 116.4074)

;;Sunrise and Sunset
;;日出而作, 日落而息
(defun diary-sunrise ()
  (let ((dss (diary-sunrise-sunset)))
    (with-temp-buffer
      (insert dss)
      (goto-char (point-min))
      (while (re-search-forward " ([^)]*)" nil t)
        (replace-match "" nil nil))
      (goto-char (point-min))
      (search-forward ",")
      (buffer-substring (point-min) (match-beginning 0)))))

(defun diary-sunset ()
  (let ((dss (diary-sunrise-sunset))
        start end)
    (with-temp-buffer
      (insert dss)
      (goto-char (point-min))
      (while (re-search-forward " ([^)]*)" nil t)
        (replace-match "" nil nil))
      (goto-char (point-min))
      (search-forward ", ")
      (setq start (match-end 0))
      (search-forward " at")
      (setq end (match-beginning 0))
      (goto-char start)
      (capitalize-word 1)
      (buffer-substring start end))))
#+END_SRC

#+name: spacemacs-user-config-org-reveal
#+BEGIN_SRC emacs-lisp

  ;; 使用 reveal.js 来生成 html 版本的 ppt
  ;; https://opensource.com/article/18/2/how-create-slides-emacs-org-mode-and-revealjs

  (require 'ox-reveal)
  (setq org-reveal-root (concat (expand-file-name "~/Library/Mobile Documents/com~apple~CloudDocs/org/reveal.js")))

  ;; 可选主题在 reveal.js 安装目录的 css/theme/
  ;; beige/black/white/blood/league/moon/night/serif/simple/sky/solarized
  (setq org-reveal-theme "simple")
  (setq org-reveal-control t)
  (setq org-reveal-center t)
  (setq org-reveal-progress t)
#+END_SRC

#+name: spacemacs-user-config-org-keyboard
#+BEGIN_SRC emacs-lisp
;; 设置快捷键

(evil-leader/set-key "op" 'org-pomodoro)
(evil-leader/set-key "oc" 'org-capture)
(evil-leader/set-key "oa" 'org-agenda)
(evil-leader/set-key "ol" 'org-store-link)
(evil-leader/set-key "el" 'eval-print-last-sexp)
(evil-leader/set-key "od" 'org-archive-subtree)

(evil-leader/set-key "oip" 'org-set-property)
(evil-leader/set-key "oil" 'org-insert-link)
(evil-leader/set-key "ois" 'org-time-stamp)
(evil-leader/set-key "oid" 'org-insert-drawer)
(evil-leader/set-key "oif" 'org-footnote-action)

(evil-leader/set-key "ood" (lambda () (interactive) (find-file "~/spacemacs-config/spacemacs-config.org")))

(evil-leader/set-key "oot" (lambda () (interactive) (find-file "~/Library/Mobile Documents/com~apple~CloudDocs/org/org-roam/inbox.org")))

;; 插入 easy template
(evil-leader/set-key "ds" 'org-insert-structure-template)

(global-set-key (kbd "C--") 'org-table-insert-hline)
#+END_SRC

再来显示相关的:
#+name: spacemacs-user-config-display
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;
;; 外观展示相关配置 ;;
;;;;;;;;;;;;;;;;;;;;;;

;; 在状态栏显示时间
(display-time-mode 1)

(global-hl-line-mode -1)

(global-visual-line-mode 1)

;; 换行宽度
(setq-default fill-column 80)

;; 打开黄金比例模式, 当前使用的窗口所占比例为 0.618
(golden-ratio-mode)

;; 默认把新开的 Window 显示在右侧
(setq split-height-threshold nil)
(setq split-width-threshold 0)

;; Remove the markup characters, i.e., "/text/" becomes (italized) "text"
(setq org-hide-emphasis-markers t)

;; 隐藏 title bar
;; (setq default-frame-alist '((undecorated . t)))
;; (add-to-list 'default-frame-alist '(drag-internal-border . 1))
;; (add-to-list 'default-frame-alist '(internal-border-width . 5))

(setq frame-title-format '("你要对这个世界有点意见"))
(set-frame-parameter (selected-frame) 'alpha '(92 90)) ;transparency
(add-to-list 'default-frame-alist '(alpha 92 90)) ;transparency

;; I find it easier to use Apple’s Command-i, Command-b, Command-u to set italics, bold, underline. In Org:
(add-hook 'org-mode-hook
          '(lambda ()
              (define-key org-mode-map (kbd "s-i") (kbd "\C-c \C-x \C-f /"))
              (define-key org-mode-map (kbd "s-b") (kbd "\C-c \C-x \C-f *"))
              (define-key org-mode-map (kbd "s-u") (kbd "\C-c \C-x \C-f _"))
              ))
#+END_SRC

配置下 LaTeX 相关内容:
#+name: spacemacs-user-config-latex
#+BEGIN_SRC emacs-lisp

;; LaTeX 配置
(setq Tex-command-default "XeLaTeX")

;; latex 支持中文
(require 'ox)
(require 'ox-html)
(require 'ox-publish)

(add-to-list 'org-latex-classes '("pdf" "\\documentclass[fontset = mac]{ctexart}
[NO-DEFAULT-PACKAGES]
\\usepackage[colorlinks,linkcolor=black,anchorcolor=black,
             citecolor=black]{hyperref}
\\usepackage[top=3truecm,bottom=2.5truecm,
            left=1.1truecm,right=1.1truecm,
            bindingoffset=1.0truecm,
            headsep=1.6truecm,
            footskip=1.5truecm,
            headheight=15pt    % 标准中没有要求页眉的高度，这里设置成
                               % 15pt 了
           ]{geometry}
\\setCJKmainfont[BoldFont={Microsoft YaHei},ItalicFont={Microsoft YaHei}]{Microsoft YaHei}
"
                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(setq org-latex-default-class "pdf")

(setq org-latex-pdf-process
      '(
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "rm -fr %b.out %b.log %b.tex auto"
        ))

(defun peng-use-xelatex ()
  (interactive)
  (let* ((tempfile
      (file-name-base))) (progn (shell-command (concat "rm -rf " tempfile
                               ".bbl " tempfile ".blg " tempfile ".out " tempfile ".log " tempfile
                               ".aux " tempfile ".toc" tempfile ".pdf"))
                    (compile (concat "xelatex "
                             (concat tempfile ".tex")
                             (concat ";rm -rf " tempfile ".bbl " tempfile
                                 ".blg " tempfile ".out " tempfile ".log " tempfile ".aux " tempfile
".toc" ";open " tempfile ".pdf"))))))
#+END_SRC

其它配置项:
#+name: spacemacs-user-config-others
#+BEGIN_SRC emacs-lisp

;; Tangle Org files when we save them
;; 一保存文件直接 tangle 代码
;; (defun tangle-on-save-org-mode-file()
;;   (when (string= (message "%s" major-mode) "org-mode")
;;     (org-babel-tangle)))

;; (add-hook 'after-save-hook 'tangle-on-save-org-mode-file)

;; 文件有更新, buffer 自动更新
(global-auto-revert-mode)

;; 编码选用 UTF-8
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)

;; gpg related
(setq epg-gpg-program "gpg2")
(setq epa-pinentry-mode 'loopback)


;; send mail using msmtp
(setq sendmail-program "/usr/local/bin/msmtp"
      send-mail-function 'smtpmail-send-it
      message-sendmail-f-is-evil t
      message-sendmail-extra-arguments '("--read-envelope-from")
      message-send-mail-function 'message-send-mail-with-sendmail)

(setq user-full-name "lijigang"
      user-mail-address "i@lijigang.com")

;; 插入今年的时间进度条
(defun make-progress (width percent has-number?)
  (let* ((done (/ percent 100.0))
         (done-width (floor (* width done))))
    (concat
     "["
     (make-string done-width ?/)
     (make-string (- width done-width) ? )
     "]"
     (if has-number? (concat " " (number-to-string percent) "%"))
     )))

(defun insert-day-progress ()
  (interactive)
  (let* ((today (time-to-day-in-year (current-time)))
         (percent (floor (* 100 (/ today 365.0)))))
    (insert (make-progress 30 percent t))
    ))

(evil-leader/set-key "oit" 'insert-day-progress)


(add-to-list 'org-src-lang-modes '("plantuml" . plantuml))

(add-to-list 'org-babel-default-header-args:plantuml
             '(:cmdline . "-charset utf-8"))

;; 时间戳使用英文星期
(setq system-time-locale "C")

;; (setq org-ditaa-jar-path "~/Library/Mobile Documents/com~apple~CloudDocs/org/private/ditaa.jar")

(setq plantuml-default-exec-mode 'jar)
(setq org-plantuml-jar-path
      (expand-file-name "~/Library/Mobile Documents/com~apple~CloudDocs/org/private/plantuml.jar"))

;; Doc: https://develop.spacemacs.org/layers/+filetree/neotree/README.html
;; Use all-the-icons packages and fonts
(setq neo-theme 'icons)

(setq yas-snippet-dirs (list "~/.spacemacs.d/snippets/"))

(setq dired-use-ls-dired nil)

;; 打开 org 文件直接进入 writeroom-mode
;; (add-hook 'org-mode-hook (lambda () (writeroom-mode 1)))

;; from: https://github.com/Fuco1/org-clock-budget
;; load el file that not in melpa
(load-file "~/Library/Mobile Documents/com~apple~CloudDocs/org/private/org-clock-budget.el")

;; load elegant theme
(load-file "~/Library/Mobile Documents/com~apple~CloudDocs/org/private/elegant.el")

;; from: https://github.com/manateelazycat/company-english-helper
(add-to-list 'load-path "~/Library/Mobile Documents/com~apple~CloudDocs/org/private")
(require 'company-english-helper)

;; bug fix
;; https://github.com/seagle0128/.emacs.d/issues/129
(org-reload)
#+END_SRC

全部梳理完毕, 现在可以生成配置文件 init.el 了:
#+name: init.el
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/init.el :exports none :noweb yes :mkdirp yes
(defun dotspacemacs/layers ()
  (setq-default
   <<spacemacs-layers>>
))

(defun dotspacemacs/init ()
  (setq-default
   <<spacemacs-init>>
))


(defun dotspacemacs/user-init ()
  <<spacemacs-user-init>>
)


(defun dotspacemacs/user-config ()
  (with-eval-after-load 'org
    <<spacemacs-user-config-org-base>>
    <<spacemacs-user-config-org-babel>>
    <<spacemacs-user-config-org-appearance>>
    <<spacemacs-user-config-org-capture>>
    <<spacemacs-user-config-org-archive>>
    <<spacemacs-user-config-org-agenda>>
    <<spacemacs-user-config-org-reveal>>
    <<spacemacs-user-config-org-keyboard>>
  )
  <<spacemacs-user-config-display>>
  <<spacemacs-user-config-latex>>
  <<spacemacs-user-config-others>>
)
#+END_SRC
* 大改: 定义 private layer
除了配置一个个 package 这个笨办法以外, Spacemacs 引入了 layer 的概念, 即将一个场景(比如使用 org-mode 或者 python)常用的一些 package 给打包放一起, 统称为一个 layer.

Spacemacs 出厂自带了很多常用的 layer, 但同时也支持你自定义. 我会把日常使用到的一些 package 放到自己的 layer 中.

#+name: private-layer-lijigang-packages
#+BEGIN_SRC emacs-lisp
(defconst lijigang-packages
  '(org-page
    dired-icon
    cnfonts
    swiper
    wttrin
    beacon
    pangu-spacing
    rime
    posframe
    org-kanban
    visual-fill-column
    all-the-icons
    doom-modeline
    org-analyzer
    org-roam
    org-roam-server
    helpful
    helm-org-rifle
    wc-mode
    writeroom-mode
    speed-type
    org-sidebar
    dired-subtree
    ;; sis
    )
)
#+END_SRC

#+name: private-layer-lijigang-init
#+BEGIN_SRC emacs-lisp
(defun lijigang/init-org-page()
  "Initialize org-page to publish blog."
  (use-package org-page
    :ensure t
    :config (progn
          (setq op/site-main-title "你对这个世界要有点意见")
          (setq op/personal-github-link "https://github.com/lijigang")
          (setq op/repository-directory "~/lijigang")
          (setq op/site-domain "http://lijigang.github.io/")
          (setq op/theme-root-directory (car (file-expand-wildcards "~/.emacs.d/elpa/org-page-*/themes" t)))
          (setq op/theme 'ljg)
          (setq op/highlight-render 'js)
          (setq op/category-ignore-list '("themes" "assets" "images"))
          (setq op/category-config-alist
            '(("blog"
              :show-meta t
              :show-comment t
              :uri-generator op/generate-uri
              :uri-template "/blog/%y/%m/%d/%t/"
              :sort-by :date     ;; how to sort the posts
              :category-index nil) ;; generate category index or not
              ("index"
              :show-meta nil
              :show-comment nil
              :uri-generator op/generate-uri
              :uri-template "/"
              :sort-by :date
              :category-index nil)
              ("about"
              :show-meta nil
              :show-comment nil
              :uri-generator op/generate-uri
              :uri-template "/about/"
              :sort-by :date
              :category-index nil)))
          (bind-key "C-c M-p" 'op/do-publication-and-preview-site)))
    )

(defun lijigang/init-dired-icon ()
  "Initialize dired-icon"
  (add-hook 'dired-mode-hook 'dired-icon-mode)
  (add-hook 'dired-mode-hook
            (lambda ()
              (highlight-lines-matching-regexp "\.org$" 'hi-yellow))))

(defun lijigang/init-cnfonts()
  "Initialize cnfonts"
  (use-package cnfonts
    :init
    (cnfonts-enable)
    (cnfonts-set-spacemacs-fallback-fonts)))

(defun lijigang/init-swiper()
  "Initialize swiper"
  (use-package swiper
    :init
    (define-key global-map (kbd "C-s") 'swiper)))


(defun lijigang/init-wttrin()
  (use-package wttrin
    :ensure t
    :commands (wttrin)
    :init
    (setq wttrin-default-cities '("Beijing"
                                  "Bristol")))
  )

(defun lijigang/init-beacon()
  "Initialize beacon"
  (use-package beacon
    :init
    (beacon-mode 1)
    (setq beacon-color "#666600")))

(defun lijigang/init-pangu-spacing()
  "Initialize pangu-spacing"
  (use-package pangu-spacing
    :init
    (global-pangu-spacing-mode 1)
    (setq pangu-spacing-real-insert-separtor t)))


(defun lijigang/init-rime ()
    (use-package rime
      :custom
      (default-input-method "rime")
      (rime-librime-root "~/.emacs.d/librime/dist")
      :config
      (setq rime-user-data-dir "~/Library/Rime")
      (setq rime-show-candidate 'posframe)
      (setq rime-posframe-style 'simple)))

(defun lijigang/init-posframe ()
  (use-package posframe))

(defun lijigang/init-org-kanban ()
  (use-package org-kanban))

(defun lijigang/init-visual-fill-column ()
  (use-package visual-fill-column
    :ensure t
    :defer t
    :init
    (dolist (hook '(visual-line-mode-hook
                    org-mode-hook
                    text-mode-hook
                    ))
      (add-hook hook #'visual-fill-column-mode))
    :config (setq-default visual-fill-column-width 90
                          ;; visual-fill-column-center-text t
                          visual-fill-column-fringes-outside-margins nil)))

(defun lijigang/init-all-the-icons ()
  (use-package all-the-icons))

(defun lijigang/init-doom-modeline ()
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :config
    (setq doom-modeline-major-mode-color-icon t)
    (setq doom-modeline-buffer-state-icon t)
    (setq doom-modeline-buffer-modification-icon t)
    (setq doom-modeline-enable-word-count t)
    (setq doom-modeline-vcs-max-length 12)
    ))

(defun lijigang/init-org-analyzer ()
  (use-package org-analyzer))


(defun lijigang/init-org-roam ()
  (use-package org-roam
    :hook
    (after-init . org-roam-mode)
    :custom
    (org-roam-directory "~/Library/Mobile Documents/com~apple~CloudDocs/org/org-roam/")
    :init
    (progn
      (spacemacs/declare-prefix "ar" "org-roam")
      (spacemacs/set-leader-keys
        "arl" 'org-roam
        "arc" 'org-roam-capture
        "arf" 'org-roam-find-file
        "arg" 'org-roam-graph-show)

      (spacemacs/declare-prefix-for-mode 'org-mode "mr" "org-roam")
      (spacemacs/set-leader-keys-for-major-mode 'org-mode
        "rl" 'org-roam
        "rc" 'org-roam-capture
        "rb" 'org-roam-switch-to-buffer
        "rf" 'org-roam-find-file
        "ri" 'org-roam-insert
        "rg" 'org-roam-graph-show))
    :config
    (add-to-list 'org-roam-capture-templates
        '("d" "default" plain (function org-roam--capture-get-point)
          "%?"
          :file-name "${slug}"
          :head "#+title: ${title}\n"
          :unnarrowed t))))

(defun lijigang/init-org-roam-server()
  (use-package org-roam-server
    :config
    (setq org-roam-server-host "127.0.0.1"
          org-roam-server-port 9090
          org-roam-server-export-inline-images t
          org-roam-server-authenticate nil
          org-roam-server-network-label-truncate t
          org-roam-server-network-label-truncate-length 60
          org-roam-server-network-label-wrap-length 20)
    (org-roam-server-mode))
  )


(defun lijigang/init-helpful()
  (use-package helpful
    :config
    (global-set-key (kbd "C-h f") #'helpful-callable)
    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)))


(defun lijigang/init-helm-org-rifle()
  (use-package helm-org-rifle))


(defun lijigang/init-wc-mode()
  (use-package wc-mode
    :config
    (add-hook 'org-mode-hook 'wc-mode)
    (setq wc-modeline-format "WC[%W%w/%tw]")))

(defun lijigang/init-writeroom-mode ()
  (use-package writeroom-mode))

(defun lijigang/init-speed-type()
  (use-package speed-type))


(defun lijigang/init-org-sidebar()
  (use-package org-sidebar))

(defun lijigang/init-dired-subtree()
    (use-package dired-subtree
      :defer t
      :bind (:map dired-mode-map
                  ("TAB" . dired-subtree-cycle))))

;; (defun lijigang/init-sis()
;;   (use-package sis
;;     :config
;;     (sis-ism-lazyman-config nil "rime" 'native)
;;     ;; enable the /cursor color/ mode
;;     (sis-global-cursor-color-mode t)
;;     ;; enable the /respect/ mode
;;     (sis-global-respect-mode t)
;;     ;; enable the /context/ mode for all buffers
;;     (sis-global-context-mode t)
;;     ;; enable the /inline english/ mode for all buffers
;;     (sis-global-inline-mode t)
;;     ))
#+END_SRC

把上面配置生成文件即可:
#+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/layers/lijigang/packages.el :exports none :noweb yes :mkdirp yes
<<private-layer-lijigang-packages>>
<<private-layer-lijigang-init>>
#+END_SRC
